require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var inputContainer = [].concat(_toConsumableArray(document.querySelectorAll('.input-custom')));
var input = document.querySelector('.input__field--hoshi');

inputContainer.map(function (elem) {
	document.addEventListener('DOMContentLoaded', function () {
		elem.firstElementChild.value === "" ? elem.classList.remove('input--filled') : elem.classList.add('input--filled');

		elem.firstElementChild.addEventListener('blur', function () {
			elem.firstElementChild.value === "" ? elem.classList.remove('input--filled') : elem.classList.add('input--filled');
		});
	});
});
var inputSearch = document.querySelector('#input-search');
var xmlhttp = new XMLHttpRequest();
var url = "/api/autocomplete";
inputSearch.addEventListener('keyup', function () {
	if (inputSearch.value.length >= 1) {
		xmlhttp.onreadystatechange = function () {
			if (this.readyState == 4 && this.status == 200) {
				var myArr = JSON.parse(this.responseText);
				var inputValue = inputSearch.value;
				var autocomplete = function autocomplete() {
					myArr.map(function (elem) {
						if (elem.name.indexOf(inputValue) > -1) {
							document.querySelector("#searchResult").innerHTML = '\n\t\t\t\t\t\t\t<li class="pd-b1">\n                                <a class="text is-white is-capitalized" href="/definition?word=' + elem.name + '">' + elem.name + '</a>\n\t\t\t\t\t\t\t</li>';
						}
					});
				};
				autocomplete();
			}
		};
		xmlhttp.open("GET", url, true);
		xmlhttp.send();
	} else {
		document.querySelector("#searchResult").innerHTML = " ";
	}
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9mYWN0b3ItYnVuZGxlL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdmlld3MvYXNzZXRzL2pzL2NvbXBvbmVudHMvY29tcG9uZW50cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUNBQSxJQUFJLDhDQUFxQixTQUFTLGdCQUFULENBQTBCLGVBQTFCLENBQXJCLEVBQUo7QUFDQSxJQUFJLFFBQVEsU0FBUyxhQUFULENBQXVCLHNCQUF2QixDQUFaOztBQUVBLGVBQWUsR0FBZixDQUFtQixVQUFDLElBQUQsRUFBVTtBQUM1QixVQUFTLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFNO0FBQ25ELE9BQUssaUJBQUwsQ0FBdUIsS0FBdkIsS0FBaUMsRUFBakMsR0FBc0MsS0FBSyxTQUFMLENBQWUsTUFBZixDQUFzQixlQUF0QixDQUF0QyxHQUErRSxLQUFLLFNBQUwsQ0FBZSxHQUFmLENBQW1CLGVBQW5CLENBQS9FOztBQUVBLE9BQUssaUJBQUwsQ0FBdUIsZ0JBQXZCLENBQXdDLE1BQXhDLEVBQWdELFlBQU07QUFDckQsUUFBSyxpQkFBTCxDQUF1QixLQUF2QixLQUFpQyxFQUFqQyxHQUFzQyxLQUFLLFNBQUwsQ0FBZSxNQUFmLENBQXNCLGVBQXRCLENBQXRDLEdBQStFLEtBQUssU0FBTCxDQUFlLEdBQWYsQ0FBbUIsZUFBbkIsQ0FBL0U7QUFDQSxHQUZEO0FBR0EsRUFORDtBQU9BLENBUkQ7QUFTQSxJQUFJLGNBQWMsU0FBUyxhQUFULENBQXVCLGVBQXZCLENBQWxCO0FBQ0EsSUFBSSxVQUFVLElBQUksY0FBSixFQUFkO0FBQ0EsSUFBSSxNQUFNLG1CQUFWO0FBQ0EsWUFBWSxnQkFBWixDQUE2QixPQUE3QixFQUFzQyxZQUFNO0FBQzNDLEtBQUksWUFBWSxLQUFaLENBQWtCLE1BQWxCLElBQTRCLENBQWhDLEVBQW1DO0FBQ2xDLFVBQVEsa0JBQVIsR0FBNkIsWUFBWTtBQUN4QyxPQUFJLEtBQUssVUFBTCxJQUFtQixDQUFuQixJQUF3QixLQUFLLE1BQUwsSUFBZSxHQUEzQyxFQUFnRDtBQUMvQyxRQUFJLFFBQVEsS0FBSyxLQUFMLENBQVcsS0FBSyxZQUFoQixDQUFaO0FBQ0EsUUFBSSxhQUFhLFlBQVksS0FBN0I7QUFDQSxRQUFJLGVBQWUsU0FBZixZQUFlLEdBQU07QUFDeEIsV0FBTSxHQUFOLENBQVUsVUFBQyxJQUFELEVBQVU7QUFDbkIsVUFBSSxLQUFLLElBQUwsQ0FBVSxPQUFWLENBQWtCLFVBQWxCLElBQWdDLENBQUMsQ0FBckMsRUFBd0M7QUFDdkMsZ0JBQVMsYUFBVCxDQUF1QixlQUF2QixFQUF3QyxTQUF4QywySUFFMEYsS0FBSyxJQUYvRixVQUV3RyxLQUFLLElBRjdHO0FBSUE7QUFDRCxNQVBEO0FBUUEsS0FURDtBQVVBO0FBQ0E7QUFDRCxHQWhCRDtBQWlCQSxVQUFRLElBQVIsQ0FBYSxLQUFiLEVBQW9CLEdBQXBCLEVBQXlCLElBQXpCO0FBQ0EsVUFBUSxJQUFSO0FBQ0EsRUFwQkQsTUFvQk87QUFDTixXQUFTLGFBQVQsQ0FBdUIsZUFBdkIsRUFBd0MsU0FBeEMsR0FBb0QsR0FBcEQ7QUFDQTtBQUVELENBekJEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBpbnB1dENvbnRhaW5lciA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtY3VzdG9tJyldO1xudmFyIGlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmlucHV0X19maWVsZC0taG9zaGknKTtcblxuaW5wdXRDb250YWluZXIubWFwKChlbGVtKSA9PiB7XG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG5cdFx0ZWxlbS5maXJzdEVsZW1lbnRDaGlsZC52YWx1ZSA9PT0gXCJcIiA/IGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnaW5wdXQtLWZpbGxlZCcpIDogZWxlbS5jbGFzc0xpc3QuYWRkKCdpbnB1dC0tZmlsbGVkJyk7XG5cblx0XHRlbGVtLmZpcnN0RWxlbWVudENoaWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG5cdFx0XHRlbGVtLmZpcnN0RWxlbWVudENoaWxkLnZhbHVlID09PSBcIlwiID8gZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdpbnB1dC0tZmlsbGVkJykgOiBlbGVtLmNsYXNzTGlzdC5hZGQoJ2lucHV0LS1maWxsZWQnKTtcblx0XHR9KTtcblx0fSk7XG59KTtcbmxldCBpbnB1dFNlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNpbnB1dC1zZWFyY2gnKVxubGV0IHhtbGh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbmxldCB1cmwgPSBcIi9hcGkvYXV0b2NvbXBsZXRlXCI7XG5pbnB1dFNlYXJjaC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsICgpID0+IHtcblx0aWYgKGlucHV0U2VhcmNoLnZhbHVlLmxlbmd0aCA+PSAxKSB7XG5cdFx0eG1saHR0cC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAodGhpcy5yZWFkeVN0YXRlID09IDQgJiYgdGhpcy5zdGF0dXMgPT0gMjAwKSB7XG5cdFx0XHRcdGxldCBteUFyciA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZVRleHQpO1xuXHRcdFx0XHRsZXQgaW5wdXRWYWx1ZSA9IGlucHV0U2VhcmNoLnZhbHVlO1xuXHRcdFx0XHRsZXQgYXV0b2NvbXBsZXRlID0gKCkgPT4ge1xuXHRcdFx0XHRcdG15QXJyLm1hcCgoZWxlbSkgPT4ge1xuXHRcdFx0XHRcdFx0aWYgKGVsZW0ubmFtZS5pbmRleE9mKGlucHV0VmFsdWUpID4gLTEpIHtcblx0XHRcdFx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzZWFyY2hSZXN1bHRcIikuaW5uZXJIVE1MID0gYFxuXHRcdFx0XHRcdFx0XHQ8bGkgY2xhc3M9XCJwZC1iMVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cInRleHQgaXMtd2hpdGUgaXMtY2FwaXRhbGl6ZWRcIiBocmVmPVwiL2RlZmluaXRpb24/d29yZD0ke2VsZW0ubmFtZX1cIj4ke2VsZW0ubmFtZX08L2E+XG5cdFx0XHRcdFx0XHRcdDwvbGk+YFxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdH1cblx0XHRcdFx0YXV0b2NvbXBsZXRlKCk7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHR4bWxodHRwLm9wZW4oXCJHRVRcIiwgdXJsLCB0cnVlKTtcblx0XHR4bWxodHRwLnNlbmQoKTtcblx0fSBlbHNlIHtcblx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3NlYXJjaFJlc3VsdFwiKS5pbm5lckhUTUwgPSBcIiBcIlxuXHR9XG5cbn0pXG5cblxuXG5cblxuXG5cblxuIl19
